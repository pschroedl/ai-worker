# Use the custom base image
FROM livepeer/ai-runner:base

# Set non-interactive frontend
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
cmake wget bzip2 git portaudio19-dev libasound2-dev libjack-jackd2-dev libopenblas-dev liblapack-dev build-essential autoconf automake libtool pkg-config nasm libpng-dev libjpeg-dev libwebp-dev libbrotli-dev \
libgl1-mesa-glx \
libglib2.0-0 && \
rm -rf /var/lib/apt/lists/*

# Download and build JPEG XL from source
RUN git clone https://github.com/libjxl/libjxl.git /tmp/libjxl && \
cd /tmp/libjxl && \
git submodule update --init --recursive && \
mkdir build && cd build && \
cmake .. -DCMAKE_BUILD_TYPE=Release && \
make -j$(nproc) && \
make install && \
ldconfig && \
rm -rf /tmp/libjxl

# Download and install GLIBC 2.35
RUN wget http://mirrors.edge.kernel.org/ubuntu/pool/main/g/glibc/libc6_2.35-0ubuntu3_amd64.deb && \
dpkg -i libc6_2.35-0ubuntu3_amd64.deb || apt-get install -f -y

# Define the Python version for conda environment
ARG PYTHON_VERSION=3.9

# Set environment variables for Anaconda
ENV CONDA_INSTALLER=Anaconda3-2024.06-1-Linux-x86_64.sh \
    CONDA_DIR=/models/models--yerfor--Real3DPortrait/anaconda3 \
    REPO_DIR=/models/models--yerfor--Real3DPortrait \
    ENV_NAME=real3dportrait

# Step 1: Download and install Anaconda
RUN wget https://repo.anaconda.com/archive/$CONDA_INSTALLER && \
    bash ./$CONDA_INSTALLER -b -p $CONDA_DIR && \
    rm $CONDA_INSTALLER

# Add conda to PATH
ENV PATH="$CONDA_DIR/bin:$PATH"
# Clone the repository
ARG REPO_URL=https://github.com/pschroedl/Real3DPortrait.git
ARG REQ_TXT_PATH=/Real3DPortrait_temp_repo
RUN git clone --single-branch --branch resolve_dependency_conflicts $REPO_URL $REQ_TXT_PATH

# Step 6: Clone the PyTorch3D repository
RUN git clone https://github.com/facebookresearch/pytorch3d.git /opt/pytorch3d

# Set the working directory to the mounted repository from the host
WORKDIR $REPO_DIR

# Step 3: Create the conda environment with the specified Python version
RUN conda create -p $CONDA_DIR/envs/$ENV_NAME python=$PYTHON_VERSION -y

RUN conda run -n $ENV_NAME bash -c "export CUDA_HOME=$(conda info --base)/envs/$ENV_NAME && \
    export PATH=$CUDA_HOME/bin:$PATH && \
    export CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda && \
    export CUDA_NVCC_EXECUTABLE=$CUDA_HOME/bin/nvcc && \
    export CUDA_INCLUDE_DIRS=$CUDA_HOME/include && \
    export CUDA_CUDART_LIBRARY=$CUDA_HOME/lib64/libcudart.so && \
    export LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH"

RUN conda install -n $ENV_NAME cudatoolkit=11.7 cudatoolkit-dev=11.7 -c conda-forge -y -c pytorch -c nvidia && \
    conda install -n $ENV_NAME -c conda-forge ffmpeg -y && \
    conda install -n $ENV_NAME -c pytorch pytorch torchvision torchaudio -y && \
    conda install -n $ENV_NAME -c nvidia pytorch-cuda -y && \
    conda install -n $ENV_NAME setuptools=59.5.0 -y && \
    conda run -n $ENV_NAME pip install cython openmim==0.3.9 && \
    conda run -n $ENV_NAME mim install mmcv==2.1.0 && \
    conda run -n $ENV_NAME pip install -r $REQ_TXT_PATH/docs/prepare_env/requirements.txt -v && \
    conda run -n $ENV_NAME pip install -r $REQ_TXT_PATH/docs/prepare_env/requirements.txt -v --use-deprecated=legacy-resolver
    # conda run -n $ENV_NAME nvcc --version
    
WORKDIR /app
COPY ./runner/app/ /app/app
COPY ./cmd/lipsync/run_real3dportrait.sh /app/run_real3dportrait.sh

# CMD /bin/bash run_real3dportrait.sh
# CMD ["python3", "-m", "uvicorn", "app.main:app", "--log-config", "app/cfg/uvicorn_logging_config.json", "--host", "0.0.0.0", "--port", "8000"]
CMD ["uvicorn", "app.main:app", "--log-config", "app/cfg/uvicorn_logging_config.json", "--host", "0.0.0.0", "--port", "8000"]
